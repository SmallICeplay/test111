{"remainingRequest":"F:\\LanhuProject\\test111\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\LanhuProject\\test111\\src\\views\\lanhu_xinshequshujumianbanshouye\\index.vue?vue&type=template&id=19c1a622&scoped=true","dependencies":[{"path":"F:\\LanhuProject\\test111\\src\\views\\lanhu_xinshequshujumianbanshouye\\index.vue","mtime":1754983829797},{"path":"F:\\LanhuProject\\test111\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1754911740467},{"path":"F:\\LanhuProject\\test111\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1754911740467},{"path":"F:\\LanhuProject\\test111\\node_modules\\babel-loader\\lib\\index.js","mtime":1754911753636},{"path":"F:\\LanhuProject\\test111\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1754911743123},{"path":"F:\\LanhuProject\\test111\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1754911740467},{"path":"F:\\LanhuProject\\test111\\node_modules\\vue-loader\\lib\\index.js","mtime":1754911742854}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}